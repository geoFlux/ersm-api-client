/**
 * My API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var querystring = require("querystring");
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var assign = require("core-js/library/fn/object/assign");
var BASE_PATH = "https://localhost/".replace(/\/+$/, "");
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
;
/**
 * AppDataApi - fetch parameter creator
 */
exports.AppDataApiFetchParamCreator = {
    /**
     * @param dataVersion
     * @param forceLpcData
     */
    apiAppDataGet: function (params, options) {
        var baseUrl = "/api/AppData";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "dataVersion": params["dataVersion"],
            "forceLpcData": params["forceLpcData"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * AppDataApi - functional programming interface
 */
exports.AppDataApiFp = {
    /**
     * @param dataVersion
     * @param forceLpcData
     */
    apiAppDataGet: function (params, options) {
        var fetchArgs = exports.AppDataApiFetchParamCreator.apiAppDataGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * AppDataApi - object-oriented interface
 */
var AppDataApi = (function (_super) {
    __extends(AppDataApi, _super);
    function AppDataApi() {
        _super.apply(this, arguments);
    }
    /**
     * @param dataVersion
     * @param forceLpcData
     */
    AppDataApi.prototype.apiAppDataGet = function (params, options) {
        return exports.AppDataApiFp.apiAppDataGet(params, options)(this.fetch, this.basePath);
    };
    return AppDataApi;
}(BaseAPI));
exports.AppDataApi = AppDataApi;
;
/**
 * AppDataApi - factory interface
 */
exports.AppDataApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param dataVersion
         * @param forceLpcData
         */
        apiAppDataGet: function (params, options) {
            return exports.AppDataApiFp.apiAppDataGet(params, options)(fetch, basePath);
        },
    };
};
/**
 * ContactCategoriesApi - fetch parameter creator
 */
exports.ContactCategoriesApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdDelete: function (params, options) {
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiContactsCategoriesByCategoryIdDelete");
        }
        var baseUrl = "/api/Contacts/Categories/{categoryId}"
            .replace("{" + "categoryId" + "}", "" + params["categoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdPeopleGet: function (params, options) {
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiContactsCategoriesByCategoryIdPeopleGet");
        }
        var baseUrl = "/api/Contacts/Categories/{categoryId}/People"
            .replace("{" + "categoryId" + "}", "" + params["categoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param categoryId
     * @param label
     * @param orderBy
     */
    apiContactsCategoriesByCategoryIdPut: function (params, options) {
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiContactsCategoriesByCategoryIdPut");
        }
        var baseUrl = "/api/Contacts/Categories/{categoryId}"
            .replace("{" + "categoryId" + "}", "" + params["categoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "label": params["label"],
            "orderBy": params["orderBy"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet: function (params, options) {
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet");
        }
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet");
        }
        var baseUrl = "/api/Contacts/Categories/{categoryId}/SubCategories/{subCategoryId}/People"
            .replace("{" + "categoryId" + "}", "" + params["categoryId"])
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdSubCategoriesGet: function (params, options) {
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiContactsCategoriesByCategoryIdSubCategoriesGet");
        }
        var baseUrl = "/api/Contacts/Categories/{categoryId}/SubCategories"
            .replace("{" + "categoryId" + "}", "" + params["categoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    apiContactsCategoriesGet: function (options) {
        var baseUrl = "/api/Contacts/Categories";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    apiContactsCategoriesPost: function (params, options) {
        var baseUrl = "/api/Contacts/Categories";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "label": params["label"],
            "orderBy": params["orderBy"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ContactCategoriesApi - functional programming interface
 */
exports.ContactCategoriesApiFp = {
    /**
     * *Auth Required
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdDelete: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesByCategoryIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdPeopleGet: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesByCategoryIdPeopleGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param categoryId
     * @param label
     * @param orderBy
     */
    apiContactsCategoriesByCategoryIdPut: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesByCategoryIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param categoryId
     */
    apiContactsCategoriesByCategoryIdSubCategoriesGet: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesByCategoryIdSubCategoriesGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    apiContactsCategoriesGet: function (options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    apiContactsCategoriesPost: function (params, options) {
        var fetchArgs = exports.ContactCategoriesApiFetchParamCreator.apiContactsCategoriesPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ContactCategoriesApi - object-oriented interface
 */
var ContactCategoriesApi = (function (_super) {
    __extends(ContactCategoriesApi, _super);
    function ContactCategoriesApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param categoryId
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesByCategoryIdDelete = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param categoryId
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesByCategoryIdPeopleGet = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdPeopleGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param categoryId
     * @param label
     * @param orderBy
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesByCategoryIdPut = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param categoryId
     * @param subCategoryId
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param categoryId
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesByCategoryIdSubCategoriesGet = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdSubCategoriesGet(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesGet = function (options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesGet(options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    ContactCategoriesApi.prototype.apiContactsCategoriesPost = function (params, options) {
        return exports.ContactCategoriesApiFp.apiContactsCategoriesPost(params, options)(this.fetch, this.basePath);
    };
    return ContactCategoriesApi;
}(BaseAPI));
exports.ContactCategoriesApi = ContactCategoriesApi;
;
/**
 * ContactCategoriesApi - factory interface
 */
exports.ContactCategoriesApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param categoryId
         */
        apiContactsCategoriesByCategoryIdDelete: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param categoryId
         */
        apiContactsCategoriesByCategoryIdPeopleGet: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdPeopleGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param categoryId
         * @param label
         * @param orderBy
         */
        apiContactsCategoriesByCategoryIdPut: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdPut(params, options)(fetch, basePath);
        },
        /**
         * @param categoryId
         * @param subCategoryId
         */
        apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdSubCategoriesBySubCategoryIdPeopleGet(params, options)(fetch, basePath);
        },
        /**
         * @param categoryId
         */
        apiContactsCategoriesByCategoryIdSubCategoriesGet: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesByCategoryIdSubCategoriesGet(params, options)(fetch, basePath);
        },
        /**
         */
        apiContactsCategoriesGet: function (options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesGet(options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param label
         * @param orderBy
         */
        apiContactsCategoriesPost: function (params, options) {
            return exports.ContactCategoriesApiFp.apiContactsCategoriesPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * ContactPeopleApi - fetch parameter creator
 */
exports.ContactPeopleApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    apiContactsPeopleByPersonIdAddToCategoryPost: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdAddToCategoryPost");
        }
        var baseUrl = "/api/Contacts/People/{personId}/AddToCategory"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "categoryId": params["categoryId"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsPeopleByPersonIdAddToSubCategoryPost: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdAddToSubCategoryPost");
        }
        var baseUrl = "/api/Contacts/People/{personId}/AddToSubCategory"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "categoryId": params["categoryId"],
            "subCategoryId": params["subCategoryId"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param personId
     */
    apiContactsPeopleByPersonIdCategoriesGet: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdCategoriesGet");
        }
        var baseUrl = "/api/Contacts/People/{personId}/Categories"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     */
    apiContactsPeopleByPersonIdDelete: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdDelete");
        }
        var baseUrl = "/api/Contacts/People/{personId}"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param personId
     */
    apiContactsPeopleByPersonIdGet: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdGet");
        }
        var baseUrl = "/api/Contacts/People/{personId}"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param personId
     * @param width
     * @param height
     */
    apiContactsPeopleByPersonIdPictureGet: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdPictureGet");
        }
        var baseUrl = "/api/Contacts/People/{personId}/Picture"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "width": params["width"],
            "height": params["height"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param uploadedFile
     */
    apiContactsPeopleByPersonIdPicturePost: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdPicturePost");
        }
        var baseUrl = "/api/Contacts/People/{personId}/Picture"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "uploadedFile": params["uploadedFile"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     */
    apiContactsPeopleByPersonIdPut: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdPut");
        }
        var baseUrl = "/api/Contacts/People/{personId}"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Region": params["region"],
            "FirstName": params["firstName"],
            "LastName": params["lastName"],
            "Phone": params["phone"],
            "Cell": params["cell"],
            "Email": params["email"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    apiContactsPeopleByPersonIdRemoveFromCategoryDelete: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdRemoveFromCategoryDelete");
        }
        var baseUrl = "/api/Contacts/People/{personId}/RemoveFromCategory"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "categoryId": params["categoryId"],
        });
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete: function (params, options) {
        // verify required parameter "personId" is set
        if (params["personId"] == null) {
            throw new Error("Missing required parameter personId when calling apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete");
        }
        var baseUrl = "/api/Contacts/People/{personId}/RemoveFromSubCategory"
            .replace("{" + "personId" + "}", "" + params["personId"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "categoryId": params["categoryId"],
            "subCategoryId": params["subCategoryId"],
        });
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    apiContactsPeopleGet: function (options) {
        var baseUrl = "/api/Contacts/People";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     * @param uploadedFile
     */
    apiContactsPeoplePost: function (params, options) {
        var baseUrl = "/api/Contacts/People";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Region": params["region"],
            "FirstName": params["firstName"],
            "LastName": params["lastName"],
            "Phone": params["phone"],
            "Cell": params["cell"],
            "Email": params["email"],
            "uploadedFile": params["uploadedFile"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ContactPeopleApi - functional programming interface
 */
exports.ContactPeopleApiFp = {
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    apiContactsPeopleByPersonIdAddToCategoryPost: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdAddToCategoryPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsPeopleByPersonIdAddToSubCategoryPost: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdAddToSubCategoryPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param personId
     */
    apiContactsPeopleByPersonIdCategoriesGet: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdCategoriesGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     */
    apiContactsPeopleByPersonIdDelete: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param personId
     */
    apiContactsPeopleByPersonIdGet: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param personId
     * @param width
     * @param height
     */
    apiContactsPeopleByPersonIdPictureGet: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdPictureGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param uploadedFile
     */
    apiContactsPeopleByPersonIdPicturePost: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdPicturePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     */
    apiContactsPeopleByPersonIdPut: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    apiContactsPeopleByPersonIdRemoveFromCategoryDelete: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdRemoveFromCategoryDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    apiContactsPeopleGet: function (options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeopleGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     * @param uploadedFile
     */
    apiContactsPeoplePost: function (params, options) {
        var fetchArgs = exports.ContactPeopleApiFetchParamCreator.apiContactsPeoplePost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ContactPeopleApi - object-oriented interface
 */
var ContactPeopleApi = (function (_super) {
    __extends(ContactPeopleApi, _super);
    function ContactPeopleApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdAddToCategoryPost = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdAddToCategoryPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdAddToSubCategoryPost = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdAddToSubCategoryPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param personId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdCategoriesGet = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdCategoriesGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdDelete = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param personId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdGet = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param personId
     * @param width
     * @param height
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdPictureGet = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPictureGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     * @param uploadedFile
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdPicturePost = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPicturePost(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdPut = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdRemoveFromCategoryDelete = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdRemoveFromCategoryDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param personId
     * @param categoryId
     * @param subCategoryId
     */
    ContactPeopleApi.prototype.apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    ContactPeopleApi.prototype.apiContactsPeopleGet = function (options) {
        return exports.ContactPeopleApiFp.apiContactsPeopleGet(options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param region
     * @param firstName
     * @param lastName
     * @param phone
     * @param cell
     * @param email
     * @param uploadedFile
     */
    ContactPeopleApi.prototype.apiContactsPeoplePost = function (params, options) {
        return exports.ContactPeopleApiFp.apiContactsPeoplePost(params, options)(this.fetch, this.basePath);
    };
    return ContactPeopleApi;
}(BaseAPI));
exports.ContactPeopleApi = ContactPeopleApi;
;
/**
 * ContactPeopleApi - factory interface
 */
exports.ContactPeopleApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param personId
         * @param categoryId
         */
        apiContactsPeopleByPersonIdAddToCategoryPost: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdAddToCategoryPost(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         * @param categoryId
         * @param subCategoryId
         */
        apiContactsPeopleByPersonIdAddToSubCategoryPost: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdAddToSubCategoryPost(params, options)(fetch, basePath);
        },
        /**
         * @param personId
         */
        apiContactsPeopleByPersonIdCategoriesGet: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdCategoriesGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         */
        apiContactsPeopleByPersonIdDelete: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param personId
         */
        apiContactsPeopleByPersonIdGet: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdGet(params, options)(fetch, basePath);
        },
        /**
         * @param personId
         * @param width
         * @param height
         */
        apiContactsPeopleByPersonIdPictureGet: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPictureGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         * @param uploadedFile
         */
        apiContactsPeopleByPersonIdPicturePost: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPicturePost(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         * @param region
         * @param firstName
         * @param lastName
         * @param phone
         * @param cell
         * @param email
         */
        apiContactsPeopleByPersonIdPut: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdPut(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         * @param categoryId
         */
        apiContactsPeopleByPersonIdRemoveFromCategoryDelete: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdRemoveFromCategoryDelete(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param personId
         * @param categoryId
         * @param subCategoryId
         */
        apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleByPersonIdRemoveFromSubCategoryDelete(params, options)(fetch, basePath);
        },
        /**
         */
        apiContactsPeopleGet: function (options) {
            return exports.ContactPeopleApiFp.apiContactsPeopleGet(options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param region
         * @param firstName
         * @param lastName
         * @param phone
         * @param cell
         * @param email
         * @param uploadedFile
         */
        apiContactsPeoplePost: function (params, options) {
            return exports.ContactPeopleApiFp.apiContactsPeoplePost(params, options)(fetch, basePath);
        },
    };
};
/**
 * ContactSubCategoriesApi - fetch parameter creator
 */
exports.ContactSubCategoriesApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost: function (params, options) {
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost");
        }
        var baseUrl = "/api/Contacts/SubCategories/{subCategoryId}/AddToCategory"
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "categoryId": params["categoryId"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     */
    apiContactsSubCategoriesBySubCategoryIdDelete: function (params, options) {
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsSubCategoriesBySubCategoryIdDelete");
        }
        var baseUrl = "/api/Contacts/SubCategories/{subCategoryId}"
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param subCategoryId
     */
    apiContactsSubCategoriesBySubCategoryIdGet: function (params, options) {
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsSubCategoriesBySubCategoryIdGet");
        }
        var baseUrl = "/api/Contacts/SubCategories/{subCategoryId}"
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     * @param label
     * @param orderBy
     */
    apiContactsSubCategoriesBySubCategoryIdPut: function (params, options) {
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsSubCategoriesBySubCategoryIdPut");
        }
        var baseUrl = "/api/Contacts/SubCategories/{subCategoryId}"
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "label": params["label"],
            "orderBy": params["orderBy"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete: function (params, options) {
        // verify required parameter "subCategoryId" is set
        if (params["subCategoryId"] == null) {
            throw new Error("Missing required parameter subCategoryId when calling apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete");
        }
        var baseUrl = "/api/Contacts/SubCategories/{subCategoryId}/RemoveFromCategory"
            .replace("{" + "subCategoryId" + "}", "" + params["subCategoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "categoryId": params["categoryId"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    apiContactsSubCategoriesGet: function (options) {
        var baseUrl = "/api/Contacts/SubCategories";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    apiContactsSubCategoriesPost: function (params, options) {
        var baseUrl = "/api/Contacts/SubCategories";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "label": params["label"],
            "orderBy": params["orderBy"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * ContactSubCategoriesApi - functional programming interface
 */
exports.ContactSubCategoriesApiFp = {
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     */
    apiContactsSubCategoriesBySubCategoryIdDelete: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesBySubCategoryIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param subCategoryId
     */
    apiContactsSubCategoriesBySubCategoryIdGet: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesBySubCategoryIdGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     * @param label
     * @param orderBy
     */
    apiContactsSubCategoriesBySubCategoryIdPut: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesBySubCategoryIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    apiContactsSubCategoriesGet: function (options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    apiContactsSubCategoriesPost: function (params, options) {
        var fetchArgs = exports.ContactSubCategoriesApiFetchParamCreator.apiContactsSubCategoriesPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * ContactSubCategoriesApi - object-oriented interface
 */
var ContactSubCategoriesApi = (function (_super) {
    __extends(ContactSubCategoriesApi, _super);
    function ContactSubCategoriesApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param subCategoryId
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesBySubCategoryIdDelete = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param subCategoryId
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesBySubCategoryIdGet = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param subCategoryId
     * @param label
     * @param orderBy
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesBySubCategoryIdPut = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param subCategoryId
     * @param categoryId
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesGet = function (options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesGet(options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param label
     * @param orderBy
     */
    ContactSubCategoriesApi.prototype.apiContactsSubCategoriesPost = function (params, options) {
        return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesPost(params, options)(this.fetch, this.basePath);
    };
    return ContactSubCategoriesApi;
}(BaseAPI));
exports.ContactSubCategoriesApi = ContactSubCategoriesApi;
;
/**
 * ContactSubCategoriesApi - factory interface
 */
exports.ContactSubCategoriesApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param subCategoryId
         * @param categoryId
         */
        apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdAddToCategoryPost(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param subCategoryId
         */
        apiContactsSubCategoriesBySubCategoryIdDelete: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param subCategoryId
         */
        apiContactsSubCategoriesBySubCategoryIdGet: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param subCategoryId
         * @param label
         * @param orderBy
         */
        apiContactsSubCategoriesBySubCategoryIdPut: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdPut(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param subCategoryId
         * @param categoryId
         */
        apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesBySubCategoryIdRemoveFromCategoryDelete(params, options)(fetch, basePath);
        },
        /**
         */
        apiContactsSubCategoriesGet: function (options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesGet(options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param label
         * @param orderBy
         */
        apiContactsSubCategoriesPost: function (params, options) {
            return exports.ContactSubCategoriesApiFp.apiContactsSubCategoriesPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * LpcApi - fetch parameter creator
 */
exports.LpcApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param id
     */
    apiLpcByIdDelete: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdDelete");
        }
        var baseUrl = "/api/Lpc/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    apiLpcByIdGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdGet");
        }
        var baseUrl = "/api/Lpc/{id})"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     * @param width
     * @param height
     */
    apiLpcByIdIconGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdIconGet");
        }
        var baseUrl = "/api/Lpc/{id}/Icon"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "width": params["width"],
            "height": params["height"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param icon
     */
    apiLpcByIdIconPost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdIconPost");
        }
        var baseUrl = "/api/Lpc/{id}/Icon"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "icon": params["icon"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     * @param width
     * @param height
     */
    apiLpcByIdPhotoGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdPhotoGet");
        }
        var baseUrl = "/api/Lpc/{id}/Photo"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "width": params["width"],
            "height": params["height"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param photo
     */
    apiLpcByIdPhotoPost: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdPhotoPost");
        }
        var baseUrl = "/api/Lpc/{id}/Photo"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "photo": params["photo"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    apiLpcByIdPut: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiLpcByIdPut");
        }
        var baseUrl = "/api/Lpc/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Name": params["name"],
            "Address1": params["address1"],
            "City1": params["city1"],
            "State1": params["state1"],
            "Zip1": params["zip1"],
            "Address2": params["address2"],
            "City2": params["city2"],
            "State2": params["state2"],
            "Zip2": params["zip2"],
            "Web": params["web"],
            "Phone": params["phone"],
            "Fax": params["fax"],
            "TotalElectricCustomers": params["totalElectricCustomers"],
            "ResidentialCustomers": params["residentialCustomers"],
            "CICustomersLessThan50kw": params["cICustomersLessThan50kw"],
            "CICustomers51To4999Kw": params["cICustomers51To4999Kw"],
            "CICustomersGreaterThan5000kw": params["cICustomersGreaterThan5000kw"],
            "TotalNaturalGasCustomers": params["totalNaturalGasCustomers"],
            "TotalWaterCustomers": params["totalWaterCustomers"],
            "TotalWastewaterCustomers": params["totalWastewaterCustomers"],
            "TotalSystemAssets": params["totalSystemAssets"],
            "Taxes": params["taxes"],
            "MilesOfLine": params["milesOfLine"],
            "CustomersPerMile": params["customersPerMile"],
            "AvgResidentialUseInKwhPerMonth": params["avgResidentialUseInKwhPerMonth"],
            "DeliveryPoints": params["deliveryPoints"],
            "AvgLoadFactor": params["avgLoadFactor"],
            "photo": params["photo"],
            "icon": params["icon"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    apiLpcGet: function (options) {
        var baseUrl = "/api/Lpc";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    apiLpcPost: function (params, options) {
        var baseUrl = "/api/Lpc";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Name": params["name"],
            "Address1": params["address1"],
            "City1": params["city1"],
            "State1": params["state1"],
            "Zip1": params["zip1"],
            "Address2": params["address2"],
            "City2": params["city2"],
            "State2": params["state2"],
            "Zip2": params["zip2"],
            "Web": params["web"],
            "Phone": params["phone"],
            "Fax": params["fax"],
            "TotalElectricCustomers": params["totalElectricCustomers"],
            "ResidentialCustomers": params["residentialCustomers"],
            "CICustomersLessThan50kw": params["cICustomersLessThan50kw"],
            "CICustomers51To4999Kw": params["cICustomers51To4999Kw"],
            "CICustomersGreaterThan5000kw": params["cICustomersGreaterThan5000kw"],
            "TotalNaturalGasCustomers": params["totalNaturalGasCustomers"],
            "TotalWaterCustomers": params["totalWaterCustomers"],
            "TotalWastewaterCustomers": params["totalWastewaterCustomers"],
            "TotalSystemAssets": params["totalSystemAssets"],
            "Taxes": params["taxes"],
            "MilesOfLine": params["milesOfLine"],
            "CustomersPerMile": params["customersPerMile"],
            "AvgResidentialUseInKwhPerMonth": params["avgResidentialUseInKwhPerMonth"],
            "DeliveryPoints": params["deliveryPoints"],
            "AvgLoadFactor": params["avgLoadFactor"],
            "photo": params["photo"],
            "icon": params["icon"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * LpcApi - functional programming interface
 */
exports.LpcApiFp = {
    /**
     * *Auth Required
     * @param id
     */
    apiLpcByIdDelete: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    apiLpcByIdGet: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     * @param width
     * @param height
     */
    apiLpcByIdIconGet: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdIconGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param icon
     */
    apiLpcByIdIconPost: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdIconPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     * @param width
     * @param height
     */
    apiLpcByIdPhotoGet: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdPhotoGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param photo
     */
    apiLpcByIdPhotoPost: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdPhotoPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    apiLpcByIdPut: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcByIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    apiLpcGet: function (options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    apiLpcPost: function (params, options) {
        var fetchArgs = exports.LpcApiFetchParamCreator.apiLpcPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * LpcApi - object-oriented interface
 */
var LpcApi = (function (_super) {
    __extends(LpcApi, _super);
    function LpcApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param id
     */
    LpcApi.prototype.apiLpcByIdDelete = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    LpcApi.prototype.apiLpcByIdGet = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     * @param width
     * @param height
     */
    LpcApi.prototype.apiLpcByIdIconGet = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdIconGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param id
     * @param icon
     */
    LpcApi.prototype.apiLpcByIdIconPost = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdIconPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     * @param width
     * @param height
     */
    LpcApi.prototype.apiLpcByIdPhotoGet = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdPhotoGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param id
     * @param photo
     */
    LpcApi.prototype.apiLpcByIdPhotoPost = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdPhotoPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param id
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    LpcApi.prototype.apiLpcByIdPut = function (params, options) {
        return exports.LpcApiFp.apiLpcByIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    LpcApi.prototype.apiLpcGet = function (options) {
        return exports.LpcApiFp.apiLpcGet(options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param name MaxLen:100
     * @param address1 MaxLen:100
     * @param city1 MaxLen:50
     * @param state1 MaxLen:2
     * @param zip1 MaxLen:50
     * @param address2 MaxLen:100
     * @param city2 MaxLen:50
     * @param state2 MaxLen:2
     * @param zip2 MaxLen:50
     * @param web MaxLen:100
     * @param phone MaxLen:10,Phone number
     * @param fax MaxLen:10,Phone number
     * @param totalElectricCustomers
     * @param residentialCustomers
     * @param cICustomersLessThan50kw
     * @param cICustomers51To4999Kw
     * @param cICustomersGreaterThan5000kw
     * @param totalNaturalGasCustomers
     * @param totalWaterCustomers
     * @param totalWastewaterCustomers
     * @param totalSystemAssets
     * @param taxes
     * @param milesOfLine
     * @param customersPerMile
     * @param avgResidentialUseInKwhPerMonth
     * @param deliveryPoints
     * @param avgLoadFactor
     * @param photo
     * @param icon
     */
    LpcApi.prototype.apiLpcPost = function (params, options) {
        return exports.LpcApiFp.apiLpcPost(params, options)(this.fetch, this.basePath);
    };
    return LpcApi;
}(BaseAPI));
exports.LpcApi = LpcApi;
;
/**
 * LpcApi - factory interface
 */
exports.LpcApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param id
         */
        apiLpcByIdDelete: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        apiLpcByIdGet: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdGet(params, options)(fetch, basePath);
        },
        /**
         * @param id
         * @param width
         * @param height
         */
        apiLpcByIdIconGet: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdIconGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param id
         * @param icon
         */
        apiLpcByIdIconPost: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdIconPost(params, options)(fetch, basePath);
        },
        /**
         * @param id
         * @param width
         * @param height
         */
        apiLpcByIdPhotoGet: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdPhotoGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param id
         * @param photo
         */
        apiLpcByIdPhotoPost: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdPhotoPost(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param id
         * @param name MaxLen:100
         * @param address1 MaxLen:100
         * @param city1 MaxLen:50
         * @param state1 MaxLen:2
         * @param zip1 MaxLen:50
         * @param address2 MaxLen:100
         * @param city2 MaxLen:50
         * @param state2 MaxLen:2
         * @param zip2 MaxLen:50
         * @param web MaxLen:100
         * @param phone MaxLen:10,Phone number
         * @param fax MaxLen:10,Phone number
         * @param totalElectricCustomers
         * @param residentialCustomers
         * @param cICustomersLessThan50kw
         * @param cICustomers51To4999Kw
         * @param cICustomersGreaterThan5000kw
         * @param totalNaturalGasCustomers
         * @param totalWaterCustomers
         * @param totalWastewaterCustomers
         * @param totalSystemAssets
         * @param taxes
         * @param milesOfLine
         * @param customersPerMile
         * @param avgResidentialUseInKwhPerMonth
         * @param deliveryPoints
         * @param avgLoadFactor
         * @param photo
         * @param icon
         */
        apiLpcByIdPut: function (params, options) {
            return exports.LpcApiFp.apiLpcByIdPut(params, options)(fetch, basePath);
        },
        /**
         */
        apiLpcGet: function (options) {
            return exports.LpcApiFp.apiLpcGet(options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param name MaxLen:100
         * @param address1 MaxLen:100
         * @param city1 MaxLen:50
         * @param state1 MaxLen:2
         * @param zip1 MaxLen:50
         * @param address2 MaxLen:100
         * @param city2 MaxLen:50
         * @param state2 MaxLen:2
         * @param zip2 MaxLen:50
         * @param web MaxLen:100
         * @param phone MaxLen:10,Phone number
         * @param fax MaxLen:10,Phone number
         * @param totalElectricCustomers
         * @param residentialCustomers
         * @param cICustomersLessThan50kw
         * @param cICustomers51To4999Kw
         * @param cICustomersGreaterThan5000kw
         * @param totalNaturalGasCustomers
         * @param totalWaterCustomers
         * @param totalWastewaterCustomers
         * @param totalSystemAssets
         * @param taxes
         * @param milesOfLine
         * @param customersPerMile
         * @param avgResidentialUseInKwhPerMonth
         * @param deliveryPoints
         * @param avgLoadFactor
         * @param photo
         * @param icon
         */
        apiLpcPost: function (params, options) {
            return exports.LpcApiFp.apiLpcPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * PdfCategoriesApi - fetch parameter creator
 */
exports.PdfCategoriesApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param id
     */
    apiPdfCategoriesByIdDelete: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfCategoriesByIdDelete");
        }
        var baseUrl = "/api/PdfCategories/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    apiPdfCategoriesByIdGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfCategoriesByIdGet");
        }
        var baseUrl = "/api/PdfCategories/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param label
     */
    apiPdfCategoriesByIdPut: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfCategoriesByIdPut");
        }
        var baseUrl = "/api/PdfCategories/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Label": params["label"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param screen
     */
    apiPdfCategoriesGet: function (params, options) {
        var baseUrl = "/api/PdfCategories";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "screen": params["screen"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param label
     */
    apiPdfCategoriesPost: function (params, options) {
        var baseUrl = "/api/PdfCategories";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Label": params["label"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PdfCategoriesApi - functional programming interface
 */
exports.PdfCategoriesApiFp = {
    /**
     * *Auth Required
     * @param id
     */
    apiPdfCategoriesByIdDelete: function (params, options) {
        var fetchArgs = exports.PdfCategoriesApiFetchParamCreator.apiPdfCategoriesByIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    apiPdfCategoriesByIdGet: function (params, options) {
        var fetchArgs = exports.PdfCategoriesApiFetchParamCreator.apiPdfCategoriesByIdGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param label
     */
    apiPdfCategoriesByIdPut: function (params, options) {
        var fetchArgs = exports.PdfCategoriesApiFetchParamCreator.apiPdfCategoriesByIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param screen
     */
    apiPdfCategoriesGet: function (params, options) {
        var fetchArgs = exports.PdfCategoriesApiFetchParamCreator.apiPdfCategoriesGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param label
     */
    apiPdfCategoriesPost: function (params, options) {
        var fetchArgs = exports.PdfCategoriesApiFetchParamCreator.apiPdfCategoriesPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PdfCategoriesApi - object-oriented interface
 */
var PdfCategoriesApi = (function (_super) {
    __extends(PdfCategoriesApi, _super);
    function PdfCategoriesApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param id
     */
    PdfCategoriesApi.prototype.apiPdfCategoriesByIdDelete = function (params, options) {
        return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    PdfCategoriesApi.prototype.apiPdfCategoriesByIdGet = function (params, options) {
        return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param id
     * @param label
     */
    PdfCategoriesApi.prototype.apiPdfCategoriesByIdPut = function (params, options) {
        return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param screen
     */
    PdfCategoriesApi.prototype.apiPdfCategoriesGet = function (params, options) {
        return exports.PdfCategoriesApiFp.apiPdfCategoriesGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param label
     */
    PdfCategoriesApi.prototype.apiPdfCategoriesPost = function (params, options) {
        return exports.PdfCategoriesApiFp.apiPdfCategoriesPost(params, options)(this.fetch, this.basePath);
    };
    return PdfCategoriesApi;
}(BaseAPI));
exports.PdfCategoriesApi = PdfCategoriesApi;
;
/**
 * PdfCategoriesApi - factory interface
 */
exports.PdfCategoriesApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param id
         */
        apiPdfCategoriesByIdDelete: function (params, options) {
            return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        apiPdfCategoriesByIdGet: function (params, options) {
            return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param id
         * @param label
         */
        apiPdfCategoriesByIdPut: function (params, options) {
            return exports.PdfCategoriesApiFp.apiPdfCategoriesByIdPut(params, options)(fetch, basePath);
        },
        /**
         * @param screen
         */
        apiPdfCategoriesGet: function (params, options) {
            return exports.PdfCategoriesApiFp.apiPdfCategoriesGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param label
         */
        apiPdfCategoriesPost: function (params, options) {
            return exports.PdfCategoriesApiFp.apiPdfCategoriesPost(params, options)(fetch, basePath);
        },
    };
};
/**
 * PdfScreensApi - fetch parameter creator
 */
exports.PdfScreensApiFetchParamCreator = {
    /**
     * @param screen
     * @param categoryId
     */
    apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet: function (params, options) {
        // verify required parameter "screen" is set
        if (params["screen"] == null) {
            throw new Error("Missing required parameter screen when calling apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet");
        }
        // verify required parameter "categoryId" is set
        if (params["categoryId"] == null) {
            throw new Error("Missing required parameter categoryId when calling apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet");
        }
        var baseUrl = "/api/PdfScreens/{screen}/Categories/{categoryId}/Pdfs"
            .replace("{" + "screen" + "}", "" + params["screen"])
            .replace("{" + "categoryId" + "}", "" + params["categoryId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param screen
     */
    apiPdfScreensByScreenCategoriesGet: function (params, options) {
        // verify required parameter "screen" is set
        if (params["screen"] == null) {
            throw new Error("Missing required parameter screen when calling apiPdfScreensByScreenCategoriesGet");
        }
        var baseUrl = "/api/PdfScreens/{screen}/Categories"
            .replace("{" + "screen" + "}", "" + params["screen"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param screen
     */
    apiPdfScreensByScreenPdfsGet: function (params, options) {
        // verify required parameter "screen" is set
        if (params["screen"] == null) {
            throw new Error("Missing required parameter screen when calling apiPdfScreensByScreenPdfsGet");
        }
        var baseUrl = "/api/PdfScreens/{screen}/Pdfs"
            .replace("{" + "screen" + "}", "" + params["screen"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     */
    apiPdfScreensGet: function (options) {
        var baseUrl = "/api/PdfScreens";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PdfScreensApi - functional programming interface
 */
exports.PdfScreensApiFp = {
    /**
     * @param screen
     * @param categoryId
     */
    apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet: function (params, options) {
        var fetchArgs = exports.PdfScreensApiFetchParamCreator.apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param screen
     */
    apiPdfScreensByScreenCategoriesGet: function (params, options) {
        var fetchArgs = exports.PdfScreensApiFetchParamCreator.apiPdfScreensByScreenCategoriesGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param screen
     */
    apiPdfScreensByScreenPdfsGet: function (params, options) {
        var fetchArgs = exports.PdfScreensApiFetchParamCreator.apiPdfScreensByScreenPdfsGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     */
    apiPdfScreensGet: function (options) {
        var fetchArgs = exports.PdfScreensApiFetchParamCreator.apiPdfScreensGet(options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PdfScreensApi - object-oriented interface
 */
var PdfScreensApi = (function (_super) {
    __extends(PdfScreensApi, _super);
    function PdfScreensApi() {
        _super.apply(this, arguments);
    }
    /**
     * @param screen
     * @param categoryId
     */
    PdfScreensApi.prototype.apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet = function (params, options) {
        return exports.PdfScreensApiFp.apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param screen
     */
    PdfScreensApi.prototype.apiPdfScreensByScreenCategoriesGet = function (params, options) {
        return exports.PdfScreensApiFp.apiPdfScreensByScreenCategoriesGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param screen
     */
    PdfScreensApi.prototype.apiPdfScreensByScreenPdfsGet = function (params, options) {
        return exports.PdfScreensApiFp.apiPdfScreensByScreenPdfsGet(params, options)(this.fetch, this.basePath);
    };
    /**
     */
    PdfScreensApi.prototype.apiPdfScreensGet = function (options) {
        return exports.PdfScreensApiFp.apiPdfScreensGet(options)(this.fetch, this.basePath);
    };
    return PdfScreensApi;
}(BaseAPI));
exports.PdfScreensApi = PdfScreensApi;
;
/**
 * PdfScreensApi - factory interface
 */
exports.PdfScreensApiFactory = function (fetch, basePath) {
    return {
        /**
         * @param screen
         * @param categoryId
         */
        apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet: function (params, options) {
            return exports.PdfScreensApiFp.apiPdfScreensByScreenCategoriesByCategoryIdPdfsGet(params, options)(fetch, basePath);
        },
        /**
         * @param screen
         */
        apiPdfScreensByScreenCategoriesGet: function (params, options) {
            return exports.PdfScreensApiFp.apiPdfScreensByScreenCategoriesGet(params, options)(fetch, basePath);
        },
        /**
         * @param screen
         */
        apiPdfScreensByScreenPdfsGet: function (params, options) {
            return exports.PdfScreensApiFp.apiPdfScreensByScreenPdfsGet(params, options)(fetch, basePath);
        },
        /**
         */
        apiPdfScreensGet: function (options) {
            return exports.PdfScreensApiFp.apiPdfScreensGet(options)(fetch, basePath);
        },
    };
};
/**
 * PdfsApi - fetch parameter creator
 */
exports.PdfsApiFetchParamCreator = {
    /**
     * *Auth Required
     * @param id
     */
    apiPdfsByIdDelete: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfsByIdDelete");
        }
        var baseUrl = "/api/Pdfs/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "DELETE" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param id
     */
    apiPdfsByIdGet: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfsByIdGet");
        }
        var baseUrl = "/api/Pdfs/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param screen
     * @param categoryId
     * @param label
     */
    apiPdfsByIdPut: function (params, options) {
        // verify required parameter "id" is set
        if (params["id"] == null) {
            throw new Error("Missing required parameter id when calling apiPdfsByIdPut");
        }
        var baseUrl = "/api/Pdfs/{id}"
            .replace("{" + "id" + "}", "" + params["id"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "PUT" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Screen": params["screen"],
            "CategoryId": params["categoryId"],
            "Label": params["label"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param pdfId
     */
    apiPdfsByPdfIdDataGet: function (params, options) {
        // verify required parameter "pdfId" is set
        if (params["pdfId"] == null) {
            throw new Error("Missing required parameter pdfId when calling apiPdfsByPdfIdDataGet");
        }
        var baseUrl = "/api/Pdfs/{pdfId}/Data"
            .replace("{" + "pdfId" + "}", "" + params["pdfId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param pdfId
     * @param uploadedFile
     */
    apiPdfsByPdfIdDataPost: function (params, options) {
        // verify required parameter "pdfId" is set
        if (params["pdfId"] == null) {
            throw new Error("Missing required parameter pdfId when calling apiPdfsByPdfIdDataPost");
        }
        var baseUrl = "/api/Pdfs/{pdfId}/Data"
            .replace("{" + "pdfId" + "}", "" + params["pdfId"]);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "uploadedFile": params["uploadedFile"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * @param screen
     */
    apiPdfsGet: function (params, options) {
        var baseUrl = "/api/Pdfs";
        var urlObj = url.parse(baseUrl, true);
        urlObj.query = assign({}, urlObj.query, {
            "screen": params["screen"],
        });
        var fetchOptions = assign({}, { method: "GET" }, options);
        var contentTypeHeader = {};
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
    /**
     * *Auth Required
     * @param screen
     * @param categoryId
     * @param label
     * @param uploadedFile
     */
    apiPdfsPost: function (params, options) {
        var baseUrl = "/api/Pdfs";
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = assign({}, { method: "POST" }, options);
        var contentTypeHeader = {};
        contentTypeHeader = { "Content-Type": "application/x-www-form-urlencoded" };
        fetchOptions.body = querystring.stringify({
            "Screen": params["screen"],
            "CategoryId": params["categoryId"],
            "Label": params["label"],
            "uploadedFile": params["uploadedFile"],
        });
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * PdfsApi - functional programming interface
 */
exports.PdfsApiFp = {
    /**
     * *Auth Required
     * @param id
     */
    apiPdfsByIdDelete: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsByIdDelete(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param id
     */
    apiPdfsByIdGet: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsByIdGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param id
     * @param screen
     * @param categoryId
     * @param label
     */
    apiPdfsByIdPut: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsByIdPut(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param pdfId
     */
    apiPdfsByPdfIdDataGet: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsByPdfIdDataGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param pdfId
     * @param uploadedFile
     */
    apiPdfsByPdfIdDataPost: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsByPdfIdDataPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * @param screen
     */
    apiPdfsGet: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsGet(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
    /**
     * *Auth Required
     * @param screen
     * @param categoryId
     * @param label
     * @param uploadedFile
     */
    apiPdfsPost: function (params, options) {
        var fetchArgs = exports.PdfsApiFetchParamCreator.apiPdfsPost(params, options);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * PdfsApi - object-oriented interface
 */
var PdfsApi = (function (_super) {
    __extends(PdfsApi, _super);
    function PdfsApi() {
        _super.apply(this, arguments);
    }
    /**
     * *Auth Required
     * @param id
     */
    PdfsApi.prototype.apiPdfsByIdDelete = function (params, options) {
        return exports.PdfsApiFp.apiPdfsByIdDelete(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param id
     */
    PdfsApi.prototype.apiPdfsByIdGet = function (params, options) {
        return exports.PdfsApiFp.apiPdfsByIdGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param id
     * @param screen
     * @param categoryId
     * @param label
     */
    PdfsApi.prototype.apiPdfsByIdPut = function (params, options) {
        return exports.PdfsApiFp.apiPdfsByIdPut(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param pdfId
     */
    PdfsApi.prototype.apiPdfsByPdfIdDataGet = function (params, options) {
        return exports.PdfsApiFp.apiPdfsByPdfIdDataGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param pdfId
     * @param uploadedFile
     */
    PdfsApi.prototype.apiPdfsByPdfIdDataPost = function (params, options) {
        return exports.PdfsApiFp.apiPdfsByPdfIdDataPost(params, options)(this.fetch, this.basePath);
    };
    /**
     * @param screen
     */
    PdfsApi.prototype.apiPdfsGet = function (params, options) {
        return exports.PdfsApiFp.apiPdfsGet(params, options)(this.fetch, this.basePath);
    };
    /**
     * *Auth Required
     * @param screen
     * @param categoryId
     * @param label
     * @param uploadedFile
     */
    PdfsApi.prototype.apiPdfsPost = function (params, options) {
        return exports.PdfsApiFp.apiPdfsPost(params, options)(this.fetch, this.basePath);
    };
    return PdfsApi;
}(BaseAPI));
exports.PdfsApi = PdfsApi;
;
/**
 * PdfsApi - factory interface
 */
exports.PdfsApiFactory = function (fetch, basePath) {
    return {
        /**
         * *Auth Required
         * @param id
         */
        apiPdfsByIdDelete: function (params, options) {
            return exports.PdfsApiFp.apiPdfsByIdDelete(params, options)(fetch, basePath);
        },
        /**
         * @param id
         */
        apiPdfsByIdGet: function (params, options) {
            return exports.PdfsApiFp.apiPdfsByIdGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param id
         * @param screen
         * @param categoryId
         * @param label
         */
        apiPdfsByIdPut: function (params, options) {
            return exports.PdfsApiFp.apiPdfsByIdPut(params, options)(fetch, basePath);
        },
        /**
         * @param pdfId
         */
        apiPdfsByPdfIdDataGet: function (params, options) {
            return exports.PdfsApiFp.apiPdfsByPdfIdDataGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param pdfId
         * @param uploadedFile
         */
        apiPdfsByPdfIdDataPost: function (params, options) {
            return exports.PdfsApiFp.apiPdfsByPdfIdDataPost(params, options)(fetch, basePath);
        },
        /**
         * @param screen
         */
        apiPdfsGet: function (params, options) {
            return exports.PdfsApiFp.apiPdfsGet(params, options)(fetch, basePath);
        },
        /**
         * *Auth Required
         * @param screen
         * @param categoryId
         * @param label
         * @param uploadedFile
         */
        apiPdfsPost: function (params, options) {
            return exports.PdfsApiFp.apiPdfsPost(params, options)(fetch, basePath);
        },
    };
};
